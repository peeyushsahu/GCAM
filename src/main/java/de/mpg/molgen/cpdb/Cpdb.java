package de.mpg.molgen.cpdb;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Logger;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/**
 * This class was generated by the JAX-WS RI. JAX-WS RI 2.1.6 Generated source
 * version: 2.1
 *
 */
@WebServiceClient(name = "cpdb", targetNamespace = "cpdbns", wsdlLocation = "http://cpdb.molgen.mpg.de/download/CPDB.wsdl")
public class Cpdb
        extends Service {

    private final static URL CPDB_WSDL_LOCATION;
    private final static Logger logger = Logger.getLogger(de.mpg.molgen.cpdb.Cpdb.class.getName());

    static {
        URL url = null;
        try {
            URL baseUrl;
            baseUrl = de.mpg.molgen.cpdb.Cpdb.class.getResource(".");
            url = new URL(baseUrl, "http://cpdb.molgen.mpg.de/download/CPDB.wsdl");
        } catch (MalformedURLException e) {
            logger.warning("Failed to create URL for the wsdl Location: 'http://cpdb.molgen.mpg.de/download/CPDB.wsdl', retrying as a local file");
            logger.warning(e.getMessage());
        }
        CPDB_WSDL_LOCATION = url;
    }

    public Cpdb(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Cpdb() {
        super(CPDB_WSDL_LOCATION, new QName("cpdbns", "cpdb"));
    }

    /**
     *
     * @return returns CpdbPortType
     */
    @WebEndpoint(name = "cpdb_port")
    public CpdbPortType getCpdbPort() {
        return super.getPort(new QName("cpdbns", "cpdb_port"), CpdbPortType.class);
    }

    /**
     *
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to
     * configure on the proxy. Supported features not in the
     * <code>features</code> parameter will have their default values.
     * @return returns CpdbPortType
     */
    @WebEndpoint(name = "cpdb_port")
    public CpdbPortType getCpdbPort(WebServiceFeature... features) {
        return super.getPort(new QName("cpdbns", "cpdb_port"), CpdbPortType.class, features);
    }

}
